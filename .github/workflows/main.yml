# Sample workflow to access AWS resources when workflow is tied to branch
# The workflow Creates static website using aws s3
name: AWS IPSECWLZ Test
on:
  push:
  workflow_dispatch:
env:
  # Setting an environment variable with the value of a configuration variable
  env_var: ${{ vars.ENV_CONTEXT_VAR }}

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  IPSecWLZtest:
    runs-on: ubuntu-latest
    concurrency:
      group: example-group
      cancel-in-progress: true
    environment: test
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/${{ vars.AWS_ROLE }}'
          role-session-name: samplerolesession
          aws-region: ${{ vars.AWS_REGION }}
      # Get STS Id test
      - name:  Get STS Id test
        run: |
          aws sts get-caller-identity
      - name: terraform plan
        uses: dflook/terraform-plan@v1
        with:
          auto_approve: true
          backend_config: |
            bucket=${{ vars.TFSTATE_BUCKET }}
            key=${{ vars.TFSTATE_KEY }}
            region=${{ vars.TFSTATE_REGION }}
          variables: |
            aws_region=${{ vars.AWS_REGION }}
            availabilityzone_wavelength=${{ vars.AWS_WLZ }}
            key_pair_name=${{ vars.EC2_KEY_PAIR }}
      - name: terraform apply
        uses: dflook/terraform-apply@v1
        with:
          auto_approve: true
          backend_config: |
            bucket=${{ vars.TFSTATE_BUCKET }}
            key=${{ vars.TFSTATE_KEY }}
            region=${{ vars.TFSTATE_REGION }}
          variables: |
            aws_region=${{ vars.AWS_REGION }}
            availabilityzone_wavelength=${{ vars.AWS_WLZ }}
            key_pair_name=${{ vars.EC2_KEY_PAIR }}
      - name: terraform destroy
        uses: dflook/terraform-destroy@v1
        with:
          backend_config: |
            bucket=${{ vars.TFSTATE_BUCKET }}
            key=${{ vars.TFSTATE_KEY }}
            region=${{ vars.TFSTATE_REGION }}